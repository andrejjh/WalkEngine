$*[ IDL to HTML conveter--------------------]
$*[ andre 23/01/98---------------------------]
$SCRIPT[EnrichModule]
$SET[TRUE,new]
$  FOR[Modules,m]
$      IF[m.name=module.name]
$        SET[FALSE,new]$SET[m,Module]
$        ADD[m.modules,module]
$      ENDIF
$  ENDFOR[]
$  IF[new]
$    SET[module,Module]
$    ADD[Modules,module]
$    CLEAN[module.modules]
$    CLEAN[module.Interfaces]
$    ADD[module.modules,module]
$  ENDIF
$ENDSCRIPT
$SCRIPT[EnrichInterface]
$SET[TRUE,new]
$  FOR[Module.Interfaces,i]
$      IF[i.name=interface.name]
$        SET[FALSE,new]$SET[i,Interface]
$        ADD[i.interfaces,interface]
$      ENDIF
$  ENDFOR[]
$  IF[new]
$    SET[interface,Interface]
$    ADD[Module.Interfaces,interface]
$    CLEAN[interface.interfaces]
$    ADD[interface.interfaces,interface]
$  ENDIF
$ENDSCRIPT
$SCRIPT[AddBottom]$*[--------------------------------------------]
<HR NOSHADE SIZE="1" WIDTH="80%">
<P><I>Generated by <B>WALK Engine</B> $ASCTIME
.</I></P>
$INSERT[trailer.html]
$ENDSCRIPT
$CLASS[scoped_name]$SCRIPT[Show]$VAR[me.scopedid] $ENDSCRIPT$ENDCLASS
$CLASS[sequence_type]$SCRIPT[Show]
<B>sequence</B>
&lt $SET[me._sequence_type1,st1]$ONDO[st1,Show] &gt
$ENDSCRIPT$ENDCLASS
$CLASS[enum_type]$SCRIPT[Show]
<B>enum</B>$VAR[me.name] {
$FOR[me.enumerators,e]
$VAR[e.name]
$ENDFOR[,]
};
$ENDSCRIPT$ENDCLASS
$CLASS[octet_type]$SCRIPT[Show]<B>octet</B> $ENDSCRIPT$ENDCLASS
$CLASS[boolean_type]$SCRIPT[Show]<B>boolean</B> $ENDSCRIPT$ENDCLASS
$CLASS[string_type]$SCRIPT[Show]<B>string</B> $ENDSCRIPT$ENDCLASS
$CLASS[char_type]$SCRIPT[Show]<B>char</B> $ENDSCRIPT$ENDCLASS
$CLASS[object_type]$SCRIPT[Show]<B>Object</B> $ENDSCRIPT$ENDCLASS
$CLASS[short_int]$SCRIPT[Show]<B>short</B> $ENDSCRIPT$ENDCLASS
$CLASS[long_int]$SCRIPT[Show]<B>long</B> $IF[me.has_longlong]long $ENDIF$ENDSCRIPT$ENDCLASS
$CLASS[unsigned_int]$SCRIPT[Show]
<B>unsigned</B> $SET[me.signed_int,si]$ONDO[si,Show]
$ENDSCRIPT$ENDCLASS
$CLASS[empty]$SCRIPT[Show]$*[-------------------------------------]
//empty$CR
$ENDSCRIPT$ENDCLASS
$CLASS[commentLine]$SCRIPT[Show]$*[-------------------------------------]
<I>$VAR[me.comment]</I><BR>$CR
$ENDSCRIPT$ENDCLASS
$CLASS[declarator]$SCRIPT[Show]$*[-------------------------------------]
$VAR[me.identifier]
$ENDSCRIPT$ENDCLASS
$CLASS[typedef]$SCRIPT[Show]$*[-------------------------------------]
<B>typedef</B> $SET[me.type_spec,ts]$ONDO[ts,Show]
$FOR[me.declarators,d]
$ONDO[d,Show]
$ENDFOR[,]
;
$ENDSCRIPT$ENDCLASS
$CLASS[member]$SCRIPT[Show]$*[-------------------------------------]
$SET[me.type_spec,ts]$ONDO[ts,Show]
$FOR[me.declarators,d]
$ONDO[d,Show]
$ENDFOR[,]
;
$ENDSCRIPT$ENDCLASS
$CLASS[struct_type]$SCRIPT[Show]$*[-------------------------------------]
<B>struct</B> $VAR[me.name] {$CR
<UL>$CR
$FOR[me.members_list,m]
$IF[m.isA="commentLine"]
$ELSE
<BR>
$ENDIF
$ONDO[m,Show]
$ENDFOR[]$CR
</UL>$CR
};
$ENDSCRIPT$ENDCLASS
$CLASS[const_exp]$SCRIPT[Show]$*[-------------------------------------]
$SET[me.or_expr,oe]$ONDO[oe,Show]
$ENDSCRIPT$ENDCLASS
$CLASS[or_expr]$SCRIPT[Show]$*[-------------------------------------]
$SET[me.xor_expr,xe]$ONDO[xe,Show]
$ENDSCRIPT$ENDCLASS
$CLASS[xor_expr]$SCRIPT[Show]$*[-------------------------------------]
$SET[me.and_expr,ae]$ONDO[ae,Show]
$ENDSCRIPT$ENDCLASS
$CLASS[and_expr]$SCRIPT[Show]$*[-------------------------------------]
$SET[me.shift_expr,se]$ONDO[se,Show]
$ENDSCRIPT$ENDCLASS
$CLASS[shift_expr]$SCRIPT[Show]$*[-------------------------------------]
$SET[me.add_expr,ae]$ONDO[ae,Show]
$ENDSCRIPT$ENDCLASS
$CLASS[add_expr]$SCRIPT[Show]$*[-------------------------------------]
$SET[me.mult_expr,me]$ONDO[me,Show]
$ENDSCRIPT$ENDCLASS
$CLASS[mult_expr]$SCRIPT[Show]$*[-------------------------------------]
$SET[me.unary_expr,ue]$ONDO[ue,Show]
$ENDSCRIPT$ENDCLASS
$CLASS[unary_expr]$SCRIPT[Show]$*[-------------------------------------]
$SET[me.primary_expr,pe]$ONDO[pe,Show]
$ENDSCRIPT$ENDCLASS
$CLASS[scoped_name]$SCRIPT[Show]$*[-------------------------------------]
$VAR[me.scopedid]
$ENDSCRIPT$ENDCLASS
$CLASS[integerLiteral]$SCRIPT[Show]$VAR[me.value]$ENDSCRIPT$ENDCLASS
$CLASS[stringLiteral]$SCRIPT[Show]"$VAR[me.value]"$ENDSCRIPT$ENDCLASS
$CLASS[booleanLiteral]$SCRIPT[Show]$VAR[me.value]$ENDSCRIPT$ENDCLASS
$CLASS[charLiteral]$SCRIPT[Show]$VAR[me.value]$ENDSCRIPT$ENDCLASS
$CLASS[const_dcl]$SCRIPT[Show]$*[-------------------------------------]
<B>const</B> $SET[me.const_type,ct]$ONDO[ct,Show] $VAR[me.identifier] = $SET[me.const_exp,ce]$ONDO[ce,Show];
$ENDSCRIPT$ENDCLASS
$CLASS[param_dcl]$SCRIPT[Show]$*[-------------------------------------]
$SET[me.param_attribute,pa]$VAR[pa.isA]
 $SET[me.param_type_spec,pts]$ONDO[pts,Show]
 $SET[me.declarator,d]$ONDO[d,Show]
$ENDSCRIPT$ENDCLASS
$CLASS[op_dcl]$SCRIPT[Show]$*[-------------------------------------]
$IF[me.has_op_attribute]$VAR[me.op_attribute]$ENDIF
$SET[me.op_type_spec,ots]$ONDO[ots,Show]
<B>$VAR[me.name]</B>(
$CR
$FOR[me.parameter_dcls,p]
$ONDO[p,Show]
$ENDFOR[, ]
)
$IF[me.has_raises_expr]
$SET[me.raises_expr,r]$ONDO[r,Show]
$ENDIF
$IF[me.has_context_expr]
$SET[me.context_expr,c]$ONDO[c,Show]
$ENDIF
;$CR
$ENDSCRIPT$ENDCLASS
$CLASS[void]$SCRIPT[Show]void $ENDSCRIPT$ENDCLASS
$CLASS[raises_expr]$SCRIPT[Show]$*[-------------------------------------]
 <B>raises</B> ($CR
$FOR[me._raises,r]
$ONDO[r,Show]
$ENDFOR[,]
)$CR
$ENDSCRIPT$ENDCLASS
$CLASS[context_expr]$SCRIPT[Show]$*[-------------------------------------]
<B>context...</B>
$ENDSCRIPT$ENDCLASS
$CLASS[Difdef]$SCRIPT[Show]$*[-------------------------------------]
</P>
<H3>#ifdef $VAR[me.name]</H3>
<UL>
$FOR[me.ifDefinitions,e]
$IF[b.isA="commentLine"]$ELSE$CR$ENDIF
<LI>$ONDO[e,Show]</LI>$CR
$ENDFOR[]$CR
</UL>
<H3>#endif</H3>
<P>$CR
$ENDSCRIPT$ENDCLASS
$CLASS[Eifdef]$SCRIPT[Show]$*[-------------------------------------]
</P>
<H3>#ifdef $VAR[me.name]</H3>
<UL>
$FOR[me.exports,e]
$IF[b.isA="commentLine"]$ELSE$CR$ENDIF
<LI>$ONDO[e,Show]</LI>$CR
$ENDFOR[]$CR
</UL>
<H3>#endif</H3>
<P>$CR
$ENDSCRIPT$ENDCLASS
$CLASS[attr_dcl]$SCRIPT[Show]$*[-------------------------------------]
$IF[me.has_readonly]readonly $ENDIF
<B>attribute</B> $SET[me.param_type_spec,pts]$ONDO[pts,Show]
 $FOR[me.declarators,d]
$ONDO[d,Show]
$ENDFOR[,]
;$CR
$ENDSCRIPT$ENDCLASS
$CLASS[except_dcl]$SCRIPT[Show]$*[-------------------------------------]
<B>exception</B> $VAR[me.name]{
$FOR[me.members_list,m]
$ONDO[m,Show]
$ENDFOR[]
};
$ENDSCRIPT$ENDCLASS
$CLASS[interface_dcl]
$SCRIPT[CreateFile]
$SET[currm.name,fileName]
$APPENDSTRING["::",fileName]
$APPEND[me.name,fileName]
$DO[redirect]
$SET[me.interface_header,ih]
$IF[ih.has_inheritance_spec]
<P><I>inherits from <A HREF="
$SET[ih.inheritance_spec,is]
$FOR[is.scopedNames,sn]$ONDO[sn,Show]$ENDFOR[]
.html">
$FOR[is.scopedNames,sn]$ONDO[sn,Show]$ENDFOR[]
</A></LI>
</I></P>
$ENDIF
<UL>
$FOR[me.interfaces,i]
$ONDO[i,Display]
$ENDFOR[]
</UL>
$DO[AddBottom]
$ENDSCRIPT
$SCRIPT[Display]
<P>
$FOR[me.interface_body,b]
$ IF[b.isA="commentLine"]
$ ELSE
<BR>
$ ENDIF
$ONDO[b,Show]
$ENDFOR[]
</P>
$ENDSCRIPT
$SCRIPT[Show]
$SET[me.interface_header,h]
<LI>interface <A HREF="$VAR[currm.name]::$VAR[h.name].html">$VAR[h.name]</A></LI>$CR
$ENDSCRIPT
$ENDCLASS
$CLASS[module]
$SCRIPT[CreateFile]
$SET[me.name,fileName]
$DO[redirect]
<UL>
$FOR[me.Interfaces,i]
<LI>interface <A HREF="$VAR[currm.name]::$VAR[i.name].html">$VAR[i.name](...)</A></LI>
$ENDFOR[]
</UL>
$FOR[me.modules,m]
$ONDO[m,Display]
$ENDFOR[]
$DO[AddBottom]
$ENDSCRIPT
$SCRIPT[Display]
<P>
$FOR[me._module_body,b]
$IF[b.isA="interface_dcl"]
$ELSE
$ IF[b.isA="commentLine"]
$ ELSE
<BR>
$ ENDIF
$ ONDO[b,Show]
$ENDIF
$ENDFOR[]
</P>
$ENDSCRIPT
$SCRIPT[Reduce]
$SET[me,module]$DO[EnrichModule]
$  FOR[me._module_body,interface]
$  IF[interface.isA="interface_dcl"]
$    SET[interface.interface_header,h]$SET[h.name,interface.name]
$    DO[EnrichInterface]
$  ENDIF
$  ENDFOR[]
$ENDSCRIPT
$SCRIPT[Show]
<LI>module <A HREF="$VAR[me.name].html">$VAR[me.name]</A></LI>$CR
<UL>
$  FOR[me.Interfaces,i]
$    ONDO[i,Show]
$  ENDFOR[]
</UL>
$ENDSCRIPT$ENDCLASS
$SCRIPT[redirect]
$SET[fileName,file]$APPENDSTRING[".html",file]
$OFSTREAM[file]
$INSERT[header.html]
<H1>$VAR[fileName]</H1>
$ENDSCRIPT
$*[main start here]$*[-------------------------------------]
$CLEAN[Modules]
$FOR[top.definitions,d]
$ONDO[d,Reduce]
$ENDFOR[]
$SETSTRING["index",fileName]
$DO[redirect]
<UL>
$FOR[Modules,currm]
$ONDO[currm,Show]
$ENDFOR[]
</UL>
$DO[AddBottom]
$FOR[Modules,currm]
$  ONDO[currm,CreateFile]
$  FOR[currm.Interfaces,i]
$    ONDO[i,CreateFile]
$  ENDFOR[]
$ENDFOR[]
